from collections.abc import Iterator
from dataclasses import dataclass, field
from datetime import datetime as dt
from pathlib import Path
from time import time

import structlog

from tagstudio.core.constants import TS_FOLDER_NAME
from tagstudio.core.library.alchemy.library import Library
from tagstudio.core.library.alchemy.models import Entry

logger = structlog.get_logger(__name__)

GLOBAL_IGNORE_SET: set[str] = set(
    [
        TS_FOLDER_NAME,
        "$RECYCLE.BIN",
        ".Trashes",
        ".Trash",
        "tagstudio_thumbs",
        ".fseventsd",
        ".Spotlight-V100",
        "System Volume Information",
        ".DS_Store",
    ]
)


@dataclass
class RefreshDirTracker:
    library: Library
    files_not_in_library: list[Path] = field(default_factory=list)

    @property
    def files_count(self) -> int:
        return len(self.files_not_in_library)

    def save_new_files(self):
        """Save the list of files that are not in the library."""
        if self.files_not_in_library:
            entries = [
                Entry(
                    path=entry_path,
                    folder=self.library.folder,
                    fields=[],
                    date_added=dt.now(),
                )
                for entry_path in self.files_not_in_library
            ]
            self.library.add_entries(entries)

        self.files_not_in_library = []

        yield

    def refresh_dir(self, lib_path: Path) -> Iterator[int]:
        """Scan a directory for files, and add those relative filenames to internal variables."""
        if self.library.library_dir is None:
            raise ValueError("No library directory set.")

        start_time_total = time()
        start_time_loop = time()

        self.files_not_in_library = []
        total_files: int = 0

        yield total_files

        paths = set(self.library.all_paths())
        folders: set[Path] = {lib_path}
        while len(folders) != 0:
            if (time() - start_time_loop) > 0.034:
                yield total_files
            start_time_loop = time()

            folder_path = folders.pop()
            # TODO: instead of fetching all Entry.paths only fetch the paths for the current folder.
            # Once the folders table is implemented we'll be able to query all entries in a folder.
            for file in folder_path.iterdir():
                if (time() - start_time_loop) > 0.034:
                    start_time_loop = time()
                    yield total_files

                relative_path = file.relative_to(lib_path)
                if relative_path in paths:
                    total_files += 1
                    continue

                # Ensure new file isn't in a globally ignored folder
                skip: bool = False
                for part in relative_path.parts:
                    # NOTE: Files starting with "._" are sometimes generated by macOS Finder.
                    # More info: https://lists.apple.com/archives/applescript-users/2006/Jun/msg00180.html
                    if part.startswith("._") or part in GLOBAL_IGNORE_SET:
                        skip = True
                        break
                if skip:
                    continue

                if file.is_dir():
                    folders.add(file)
                    continue

                total_files += 1
                self.files_not_in_library.append(relative_path)

        end_time_total = time()
        yield total_files
        logger.info(
            "Directory scan time",
            path=lib_path,
            duration=(end_time_total - start_time_total),
            files_not_in_lib=self.files_not_in_library,
            new_files=len(self.files_not_in_library),
            files_scanned=total_files,
        )
