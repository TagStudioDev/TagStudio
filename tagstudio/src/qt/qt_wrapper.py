#!/usr/bin/env python
# License: GPL v3 Copyright: 2021, Kovid Goyal <kovid@kovidgoyal.net>
# Created for calibre: https://github.com/kovidgoyal/calibre
#
# execute this script to build/update the Qt Wrapper modules

import importlib
import os
from pprint import pprint

QT_WRAPPER = "PySide6"

base = os.path.dirname(os.path.abspath(__file__))
module_lists = {
    "core": (
        "QtCore",
        "QtGui",
        "QtWidgets",
        "QtMultimedia",
        "QtMultimediaWidgets",
        "QtSvgWidgets",
    ),
    "ui_tools": ("QtUiTools",),
    "renderer": (
        "QtPdf",
        "QtSvg",
    ),
}


def scan(name):
    module_names = module_lists[name]
    name_map = {}
    types = []
    for mod_name in module_names:
        mod = importlib.import_module(f"{QT_WRAPPER}.{mod_name}")
        full_name = name_map[mod_name] = mod.__name__
        types.append(f"import {full_name}")
        for obj_name in sorted(dir(mod)):
            if not obj_name.startswith("_") and obj_name not in name_map:
                name_map[obj_name] = full_name
                types.append(f"{obj_name} = {full_name}.{obj_name}")
        types.append("")
    with open(f"{base}/{name}.py", "w") as f:
        print("# autogenerated by qt_wrapper.py do not edit", file=f)
        print(f"from .{name}_name_map import module_names, name_map", file=f)
        print(
            """from .loader import dynamic_load

already_imported = {}
qt_modules = {}

def __getattr__(name):
    return dynamic_load(name, name_map, already_imported, qt_modules, module_names)
""",
            file=f,
        )
    with open(f"{base}/{name}.pyi", "w") as f:
        print("# autogenerated by qt_wrapper.py do not edit", file=f)
        f.write("\n".join(types))
        f.write("\n")
    with open(f"{base}/{name}_name_map.py", "w") as f:
        print("# autogenerated by qt_wrapper.py do not edit", file=f)
        print("name_map =", end=" ", file=f)
        pprint(name_map, stream=f)
        print("module_names = frozenset(", end="", file=f)
        pprint(module_names, stream=f)
        print(")", file=f)


top_level_module_names = ()
for name in module_lists:
    top_level_module_names += module_lists[name]
    scan(name)
with open(f"{base}/__init__.py", "w") as f:
    print("# autogenerated by qt_wrapper.py do not edit", file=f)
    print(f"{top_level_module_names=}", file=f)
    print(
        f"""

def __getattr__(name):
    if name in top_level_module_names:
        import importlib
        return importlib.import_module("{QT_WRAPPER}." + name)
    raise AttributeError(name)
""",
        file=f,
    )
